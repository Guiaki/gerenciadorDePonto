package com.exacore.gerenciadordeponto.Models;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USUARIO".
*/
public class UsuarioDao extends AbstractDao<Usuario, Long> {

    public static final String TABLENAME = "USUARIO";

    /**
     * Properties of entity Usuario.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nome = new Property(1, String.class, "nome", false, "NOME");
        public final static Property DiaNascimento = new Property(2, int.class, "diaNascimento", false, "DIA_NASCIMENTO");
        public final static Property MesNascimento = new Property(3, int.class, "mesNascimento", false, "MES_NASCIMENTO");
        public final static Property AnoNascimento = new Property(4, int.class, "anoNascimento", false, "ANO_NASCIMENTO");
        public final static Property PIS = new Property(5, long.class, "PIS", false, "PIS");
    }


    public UsuarioDao(DaoConfig config) {
        super(config);
    }
    
    public UsuarioDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USUARIO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NOME\" TEXT," + // 1: nome
                "\"DIA_NASCIMENTO\" INTEGER NOT NULL ," + // 2: diaNascimento
                "\"MES_NASCIMENTO\" INTEGER NOT NULL ," + // 3: mesNascimento
                "\"ANO_NASCIMENTO\" INTEGER NOT NULL ," + // 4: anoNascimento
                "\"PIS\" INTEGER NOT NULL );"); // 5: PIS
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USUARIO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Usuario entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nome = entity.getNome();
        if (nome != null) {
            stmt.bindString(2, nome);
        }
        stmt.bindLong(3, entity.getDiaNascimento());
        stmt.bindLong(4, entity.getMesNascimento());
        stmt.bindLong(5, entity.getAnoNascimento());
        stmt.bindLong(6, entity.getPIS());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Usuario entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nome = entity.getNome();
        if (nome != null) {
            stmt.bindString(2, nome);
        }
        stmt.bindLong(3, entity.getDiaNascimento());
        stmt.bindLong(4, entity.getMesNascimento());
        stmt.bindLong(5, entity.getAnoNascimento());
        stmt.bindLong(6, entity.getPIS());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Usuario readEntity(Cursor cursor, int offset) {
        Usuario entity = new Usuario( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nome
            cursor.getInt(offset + 2), // diaNascimento
            cursor.getInt(offset + 3), // mesNascimento
            cursor.getInt(offset + 4), // anoNascimento
            cursor.getLong(offset + 5) // PIS
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Usuario entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNome(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDiaNascimento(cursor.getInt(offset + 2));
        entity.setMesNascimento(cursor.getInt(offset + 3));
        entity.setAnoNascimento(cursor.getInt(offset + 4));
        entity.setPIS(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Usuario entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Usuario entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Usuario entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
